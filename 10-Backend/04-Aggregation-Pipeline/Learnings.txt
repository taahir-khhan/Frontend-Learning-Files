======== Aggregation Pipeline ========

  - An aggregation pipeline consists of one or more stages that process documents:

  - Each stage performs an operation on the input documents. For example, a stage can filter documents, group documents, and calculate values.

  - The documents that are output from a stage are passed to the next stage.

  - An aggregation pipeline can return results for groups of documents. For example, return the total, average, maximum, and minimum values.

  * Note *
  - Aggregation pipelines run with the db.collection.aggregate() method do not modify documents in a collection, unless the pipeline contains a $merge or $out stage.

(1) How many Active users ?

[
  {
    $match: {
      isActive: true
    }
  },
  {
    $count: 'noOfActiveUser'
  }
]

(2) Average age of the users ?

[
  {
    $group: {
      _id: null,
      averageAge: {
        $avg: "$age"
      }
    }
  }
]

(3) List the top 2 most common favorite fruits ?

[
  {
    $group: {
      _id: "$favoriteFruit", 
      count: {
        $sum: 1
      }
    }
  }, 
  {
    $sort: {
      count: -1
    }
  },
  {
    $limit: 2
  }
]

(4) Average number of tags per user ?

[
  {
    // Its primary purpose is to deconstruct an array field in a document, creating a separate document for each element of the array  
    $unwind: {
      path: "$tags",

      // This will add a property "arrayIdx" assigned with index value.
      includeArrayIndex: "arrayIdx",

      // If there are any documents which doesn't contains this tags property or tags property is empty array, it excludes that documents or includes if the value is true.
      preserveNullAndEmptyArrays: false
    }
  },
  {
    $group: {
      _id: "$_id",
      numberOfTags: {
        $sum: 1
      }
    }
  },
  {
  $group: {
     _id: null,
     averageNumberOfTags: {
       $avg: "$numberOfTags"
     }
   }  
  }
]

  - Second Approach
[
  {
    $addFields: {
      numberOfTags: {
        $size: {$ifNull: ["$tags", []]}
      }
    }
  }, 
  {
    $group: {
      _id: null,
      averageNumberOfTags: {
        $avg: "$numberOfTags"
      }
    }
  }
]

(5) How many users have 'enim' as one of their tags ?

[
  {
    $match: {
      tags: "id"
    }
  },
  {
    $count: 'userWithSpecificTag'
  }
]

(6) What are the names and age of users who are inactive and have "velit" as tag ?

[
  {
    $match: {
      isActive: false,
      tags: "velit"
    }
  },
  {
    $project: {
      name: 1,
      age: 1
    }
  }
]

(7) How many users have a phone number starting with '+1 (990)' ?

[
  {
    $match: {
      "company.phone": /^\+1 \(990\)/
    }
  },
  {
    $count: 'userCount'
  }
]

(8) Who has registered most recently, Give me recently registered 5 users ?

[
  {
    $sort: {
      registered: -1
    }
  }, 
  {
    $project: {
      name: 1,
      registered: 1
    } 
  },
  {
    $limit: 5
  }
]

(9) Categorize the users by their eye Color and create a new property which contains all the names of the users, in that category.

[
  {
    $group: {
      _id: "$eyeColor",
      usersName: {
        $push: "$name"
      }
    }
  }
]

(10) How many users have 'ad' as the second tag in thier list of tags ?

[
  {
    $match: {
      "tags.1": "ad"
    }
  },
  {
    $count: "userCount"
  }
]

(11) Find users who have both 'enim' and 'id' as thier tag ?

[
  {
    $match: {
      tags: {
        $all: ["enim", "id"]
      }
    }
  },
]

(12) List all the companies located in USA with their corresponding user count ?

[
  {
    $match: {
      "company.location.country": "USA",
    },
  },
  {
    $group: {
      _id: "$company.title",
      peopleWhoWorkInUSACompany: {
        $sum: 1,
      },
    },
  },
]

(13) $lookup operator in MongoDB ?

[
  {
    $lookup: {
      // From the author collection
      from: "author",
      localField: "author_id",

      // Find the exact value of "author_id" in the author collection
      foreignField: "_id",
      as: "author_details"
    }
  },
  {
   $addFields: {
     author_details: {
       // This selcet the firts element in the array
       $first: "$author_details"

       // Another Approach - This clearly specifies the meaning in this operator
       $arrayElemAt: ["$author_details", 0]
     }
   }
  }
]